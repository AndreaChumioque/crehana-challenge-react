{"version":3,"sources":["generated/graphql.tsx","components/JobList/JobList.tsx","components/Loader.tsx","components/JobList/index.tsx","components/JobDetail/JobDetail.tsx","components/JobDetail/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/loader.svg"],"names":["JobOrderByInput","CityOrderByInput","CountryOrderByInput","RemoteOrderByInput","TagOrderByInput","GetJobDetailDocument","gql","GetJobListDocument","GetCompaniesDocument","GetCountriesDocument","useStyles","makeStyles","theme","createStyles","logo","color","fontSize","formControl","margin","spacing","select","border","padding","borderRadius","dropDownIcon","right","label","marginTop","marginBottom","avatar","backgroundColor","large","height","width","marginRight","link","textDecoration","jobPaper","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","JobList","jobsData","companiesData","countriesData","classes","React","orderBy","jobs","filteredJobs","setFilteredJobs","selectedCompanies","setSelectedCompanies","selectedCountries","setSelectedCountries","sortOrder","setSortOrder","filterJobs","isEmpty","cloneDeep","filter","job","includes","company","id","cities","some","city","country","sortJobs","order","sortedJobs","className","Grid","container","item","xs","sm","md","FormControl","fullWidth","Select","displayEmpty","multiple","icon","value","onChange","e","target","renderValue","selected","length","map","s","match","countries","find","c","name","join","input","Input","disableUnderline","MenuItem","disabled","key","companies","labelId","i","to","slug","Paper","variant","direction","alignItems","logoUrl","Avatar","alt","src","charAt","toUpperCase","Box","flexGrow","title","moment","postedAt","format","fullHeight","loader","LoaderComponent","justify","Loader","JobListContainer","baseOptions","ApolloReactHooks","data","jobsError","error","jobsLoading","loading","useGetCompaniesQuery","companiesError","companiesLoading","useGetCountriesQuery","countriesError","countriesLoading","small","caption","button","iconButton","divider","JobDetail","history","useHistory","Button","startIcon","onClick","goBack","Typography","display","gutterBottom","Divider","light","dangerouslySetInnerHTML","__html","Marked","parse","description","JobDetailContainer","console","log","variables","jobSlug","params","jobslug","companySlug","companyslug","locale","App","Container","maxWidth","path","exact","component","Boolean","window","location","hostname","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.33990846.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\nexport type Query = {\n   __typename?: 'Query';\n  jobs: Array<Job>;\n  job: Job;\n  locations: Array<Location>;\n  city: City;\n  country: Country;\n  remote: Remote;\n  commitments: Array<Commitment>;\n  cities: Array<City>;\n  countries: Array<Country>;\n  remotes: Array<Remote>;\n  companies: Array<Company>;\n};\n\n\nexport type QueryJobsArgs = {\n  input?: Maybe<JobsInput>;\n};\n\n\nexport type QueryJobArgs = {\n  input: JobInput;\n};\n\n\nexport type QueryLocationsArgs = {\n  input: LocationsInput;\n};\n\n\nexport type QueryCityArgs = {\n  input: LocationInput;\n};\n\n\nexport type QueryCountryArgs = {\n  input: LocationInput;\n};\n\n\nexport type QueryRemoteArgs = {\n  input: LocationInput;\n};\n\nexport type JobsInput = {\n  type?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n};\n\nexport type Job = {\n   __typename?: 'Job';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  slug: Scalars['String'];\n  commitment: Commitment;\n  cities?: Maybe<Array<City>>;\n  countries?: Maybe<Array<Country>>;\n  remotes?: Maybe<Array<Remote>>;\n  description?: Maybe<Scalars['String']>;\n  applyUrl?: Maybe<Scalars['String']>;\n  company?: Maybe<Company>;\n  tags?: Maybe<Array<Tag>>;\n  isPublished?: Maybe<Scalars['Boolean']>;\n  isFeatured?: Maybe<Scalars['Boolean']>;\n  locationNames?: Maybe<Scalars['String']>;\n  userEmail?: Maybe<Scalars['String']>;\n  postedAt: Scalars['DateTime'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type JobCitiesArgs = {\n  where?: Maybe<CityWhereInput>;\n  orderBy?: Maybe<CityOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type JobCountriesArgs = {\n  where?: Maybe<CountryWhereInput>;\n  orderBy?: Maybe<CountryOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type JobRemotesArgs = {\n  where?: Maybe<RemoteWhereInput>;\n  orderBy?: Maybe<RemoteOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type JobTagsArgs = {\n  where?: Maybe<TagWhereInput>;\n  orderBy?: Maybe<TagOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type Commitment = {\n   __typename?: 'Commitment';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  slug: Scalars['String'];\n  jobs?: Maybe<Array<Job>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CommitmentJobsArgs = {\n  where?: Maybe<JobWhereInput>;\n  orderBy?: Maybe<JobOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type JobWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  title_not?: Maybe<Scalars['String']>;\n  title_in?: Maybe<Array<Scalars['String']>>;\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  title_lt?: Maybe<Scalars['String']>;\n  title_lte?: Maybe<Scalars['String']>;\n  title_gt?: Maybe<Scalars['String']>;\n  title_gte?: Maybe<Scalars['String']>;\n  title_contains?: Maybe<Scalars['String']>;\n  title_not_contains?: Maybe<Scalars['String']>;\n  title_starts_with?: Maybe<Scalars['String']>;\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  title_ends_with?: Maybe<Scalars['String']>;\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  commitment?: Maybe<CommitmentWhereInput>;\n  cities_every?: Maybe<CityWhereInput>;\n  cities_some?: Maybe<CityWhereInput>;\n  cities_none?: Maybe<CityWhereInput>;\n  countries_every?: Maybe<CountryWhereInput>;\n  countries_some?: Maybe<CountryWhereInput>;\n  countries_none?: Maybe<CountryWhereInput>;\n  remotes_every?: Maybe<RemoteWhereInput>;\n  remotes_some?: Maybe<RemoteWhereInput>;\n  remotes_none?: Maybe<RemoteWhereInput>;\n  description?: Maybe<Scalars['String']>;\n  description_not?: Maybe<Scalars['String']>;\n  description_in?: Maybe<Array<Scalars['String']>>;\n  description_not_in?: Maybe<Array<Scalars['String']>>;\n  description_lt?: Maybe<Scalars['String']>;\n  description_lte?: Maybe<Scalars['String']>;\n  description_gt?: Maybe<Scalars['String']>;\n  description_gte?: Maybe<Scalars['String']>;\n  description_contains?: Maybe<Scalars['String']>;\n  description_not_contains?: Maybe<Scalars['String']>;\n  description_starts_with?: Maybe<Scalars['String']>;\n  description_not_starts_with?: Maybe<Scalars['String']>;\n  description_ends_with?: Maybe<Scalars['String']>;\n  description_not_ends_with?: Maybe<Scalars['String']>;\n  applyUrl?: Maybe<Scalars['String']>;\n  applyUrl_not?: Maybe<Scalars['String']>;\n  applyUrl_in?: Maybe<Array<Scalars['String']>>;\n  applyUrl_not_in?: Maybe<Array<Scalars['String']>>;\n  applyUrl_lt?: Maybe<Scalars['String']>;\n  applyUrl_lte?: Maybe<Scalars['String']>;\n  applyUrl_gt?: Maybe<Scalars['String']>;\n  applyUrl_gte?: Maybe<Scalars['String']>;\n  applyUrl_contains?: Maybe<Scalars['String']>;\n  applyUrl_not_contains?: Maybe<Scalars['String']>;\n  applyUrl_starts_with?: Maybe<Scalars['String']>;\n  applyUrl_not_starts_with?: Maybe<Scalars['String']>;\n  applyUrl_ends_with?: Maybe<Scalars['String']>;\n  applyUrl_not_ends_with?: Maybe<Scalars['String']>;\n  company?: Maybe<CompanyWhereInput>;\n  tags_every?: Maybe<TagWhereInput>;\n  tags_some?: Maybe<TagWhereInput>;\n  tags_none?: Maybe<TagWhereInput>;\n  isPublished?: Maybe<Scalars['Boolean']>;\n  isPublished_not?: Maybe<Scalars['Boolean']>;\n  isFeatured?: Maybe<Scalars['Boolean']>;\n  isFeatured_not?: Maybe<Scalars['Boolean']>;\n  locationNames?: Maybe<Scalars['String']>;\n  locationNames_not?: Maybe<Scalars['String']>;\n  locationNames_in?: Maybe<Array<Scalars['String']>>;\n  locationNames_not_in?: Maybe<Array<Scalars['String']>>;\n  locationNames_lt?: Maybe<Scalars['String']>;\n  locationNames_lte?: Maybe<Scalars['String']>;\n  locationNames_gt?: Maybe<Scalars['String']>;\n  locationNames_gte?: Maybe<Scalars['String']>;\n  locationNames_contains?: Maybe<Scalars['String']>;\n  locationNames_not_contains?: Maybe<Scalars['String']>;\n  locationNames_starts_with?: Maybe<Scalars['String']>;\n  locationNames_not_starts_with?: Maybe<Scalars['String']>;\n  locationNames_ends_with?: Maybe<Scalars['String']>;\n  locationNames_not_ends_with?: Maybe<Scalars['String']>;\n  userEmail?: Maybe<Scalars['String']>;\n  userEmail_not?: Maybe<Scalars['String']>;\n  userEmail_in?: Maybe<Array<Scalars['String']>>;\n  userEmail_not_in?: Maybe<Array<Scalars['String']>>;\n  userEmail_lt?: Maybe<Scalars['String']>;\n  userEmail_lte?: Maybe<Scalars['String']>;\n  userEmail_gt?: Maybe<Scalars['String']>;\n  userEmail_gte?: Maybe<Scalars['String']>;\n  userEmail_contains?: Maybe<Scalars['String']>;\n  userEmail_not_contains?: Maybe<Scalars['String']>;\n  userEmail_starts_with?: Maybe<Scalars['String']>;\n  userEmail_not_starts_with?: Maybe<Scalars['String']>;\n  userEmail_ends_with?: Maybe<Scalars['String']>;\n  userEmail_not_ends_with?: Maybe<Scalars['String']>;\n  postedAt?: Maybe<Scalars['DateTime']>;\n  postedAt_not?: Maybe<Scalars['DateTime']>;\n  postedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  postedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  postedAt_lt?: Maybe<Scalars['DateTime']>;\n  postedAt_lte?: Maybe<Scalars['DateTime']>;\n  postedAt_gt?: Maybe<Scalars['DateTime']>;\n  postedAt_gte?: Maybe<Scalars['DateTime']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<JobWhereInput>>;\n  OR?: Maybe<Array<JobWhereInput>>;\n  NOT?: Maybe<Array<JobWhereInput>>;\n};\n\nexport type CommitmentWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  title_not?: Maybe<Scalars['String']>;\n  title_in?: Maybe<Array<Scalars['String']>>;\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  title_lt?: Maybe<Scalars['String']>;\n  title_lte?: Maybe<Scalars['String']>;\n  title_gt?: Maybe<Scalars['String']>;\n  title_gte?: Maybe<Scalars['String']>;\n  title_contains?: Maybe<Scalars['String']>;\n  title_not_contains?: Maybe<Scalars['String']>;\n  title_starts_with?: Maybe<Scalars['String']>;\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  title_ends_with?: Maybe<Scalars['String']>;\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  jobs_every?: Maybe<JobWhereInput>;\n  jobs_some?: Maybe<JobWhereInput>;\n  jobs_none?: Maybe<JobWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<CommitmentWhereInput>>;\n  OR?: Maybe<Array<CommitmentWhereInput>>;\n  NOT?: Maybe<Array<CommitmentWhereInput>>;\n};\n\n\nexport type CityWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  country?: Maybe<CountryWhereInput>;\n  type?: Maybe<Scalars['String']>;\n  type_not?: Maybe<Scalars['String']>;\n  type_in?: Maybe<Array<Scalars['String']>>;\n  type_not_in?: Maybe<Array<Scalars['String']>>;\n  type_lt?: Maybe<Scalars['String']>;\n  type_lte?: Maybe<Scalars['String']>;\n  type_gt?: Maybe<Scalars['String']>;\n  type_gte?: Maybe<Scalars['String']>;\n  type_contains?: Maybe<Scalars['String']>;\n  type_not_contains?: Maybe<Scalars['String']>;\n  type_starts_with?: Maybe<Scalars['String']>;\n  type_not_starts_with?: Maybe<Scalars['String']>;\n  type_ends_with?: Maybe<Scalars['String']>;\n  type_not_ends_with?: Maybe<Scalars['String']>;\n  jobs_every?: Maybe<JobWhereInput>;\n  jobs_some?: Maybe<JobWhereInput>;\n  jobs_none?: Maybe<JobWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<CityWhereInput>>;\n  OR?: Maybe<Array<CityWhereInput>>;\n  NOT?: Maybe<Array<CityWhereInput>>;\n};\n\nexport type CountryWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  type_not?: Maybe<Scalars['String']>;\n  type_in?: Maybe<Array<Scalars['String']>>;\n  type_not_in?: Maybe<Array<Scalars['String']>>;\n  type_lt?: Maybe<Scalars['String']>;\n  type_lte?: Maybe<Scalars['String']>;\n  type_gt?: Maybe<Scalars['String']>;\n  type_gte?: Maybe<Scalars['String']>;\n  type_contains?: Maybe<Scalars['String']>;\n  type_not_contains?: Maybe<Scalars['String']>;\n  type_starts_with?: Maybe<Scalars['String']>;\n  type_not_starts_with?: Maybe<Scalars['String']>;\n  type_ends_with?: Maybe<Scalars['String']>;\n  type_not_ends_with?: Maybe<Scalars['String']>;\n  isoCode?: Maybe<Scalars['String']>;\n  isoCode_not?: Maybe<Scalars['String']>;\n  isoCode_in?: Maybe<Array<Scalars['String']>>;\n  isoCode_not_in?: Maybe<Array<Scalars['String']>>;\n  isoCode_lt?: Maybe<Scalars['String']>;\n  isoCode_lte?: Maybe<Scalars['String']>;\n  isoCode_gt?: Maybe<Scalars['String']>;\n  isoCode_gte?: Maybe<Scalars['String']>;\n  isoCode_contains?: Maybe<Scalars['String']>;\n  isoCode_not_contains?: Maybe<Scalars['String']>;\n  isoCode_starts_with?: Maybe<Scalars['String']>;\n  isoCode_not_starts_with?: Maybe<Scalars['String']>;\n  isoCode_ends_with?: Maybe<Scalars['String']>;\n  isoCode_not_ends_with?: Maybe<Scalars['String']>;\n  cities_every?: Maybe<CityWhereInput>;\n  cities_some?: Maybe<CityWhereInput>;\n  cities_none?: Maybe<CityWhereInput>;\n  jobs_every?: Maybe<JobWhereInput>;\n  jobs_some?: Maybe<JobWhereInput>;\n  jobs_none?: Maybe<JobWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<CountryWhereInput>>;\n  OR?: Maybe<Array<CountryWhereInput>>;\n  NOT?: Maybe<Array<CountryWhereInput>>;\n};\n\nexport type RemoteWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  type_not?: Maybe<Scalars['String']>;\n  type_in?: Maybe<Array<Scalars['String']>>;\n  type_not_in?: Maybe<Array<Scalars['String']>>;\n  type_lt?: Maybe<Scalars['String']>;\n  type_lte?: Maybe<Scalars['String']>;\n  type_gt?: Maybe<Scalars['String']>;\n  type_gte?: Maybe<Scalars['String']>;\n  type_contains?: Maybe<Scalars['String']>;\n  type_not_contains?: Maybe<Scalars['String']>;\n  type_starts_with?: Maybe<Scalars['String']>;\n  type_not_starts_with?: Maybe<Scalars['String']>;\n  type_ends_with?: Maybe<Scalars['String']>;\n  type_not_ends_with?: Maybe<Scalars['String']>;\n  jobs_every?: Maybe<JobWhereInput>;\n  jobs_some?: Maybe<JobWhereInput>;\n  jobs_none?: Maybe<JobWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<RemoteWhereInput>>;\n  OR?: Maybe<Array<RemoteWhereInput>>;\n  NOT?: Maybe<Array<RemoteWhereInput>>;\n};\n\nexport type CompanyWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  websiteUrl?: Maybe<Scalars['String']>;\n  websiteUrl_not?: Maybe<Scalars['String']>;\n  websiteUrl_in?: Maybe<Array<Scalars['String']>>;\n  websiteUrl_not_in?: Maybe<Array<Scalars['String']>>;\n  websiteUrl_lt?: Maybe<Scalars['String']>;\n  websiteUrl_lte?: Maybe<Scalars['String']>;\n  websiteUrl_gt?: Maybe<Scalars['String']>;\n  websiteUrl_gte?: Maybe<Scalars['String']>;\n  websiteUrl_contains?: Maybe<Scalars['String']>;\n  websiteUrl_not_contains?: Maybe<Scalars['String']>;\n  websiteUrl_starts_with?: Maybe<Scalars['String']>;\n  websiteUrl_not_starts_with?: Maybe<Scalars['String']>;\n  websiteUrl_ends_with?: Maybe<Scalars['String']>;\n  websiteUrl_not_ends_with?: Maybe<Scalars['String']>;\n  logoUrl?: Maybe<Scalars['String']>;\n  logoUrl_not?: Maybe<Scalars['String']>;\n  logoUrl_in?: Maybe<Array<Scalars['String']>>;\n  logoUrl_not_in?: Maybe<Array<Scalars['String']>>;\n  logoUrl_lt?: Maybe<Scalars['String']>;\n  logoUrl_lte?: Maybe<Scalars['String']>;\n  logoUrl_gt?: Maybe<Scalars['String']>;\n  logoUrl_gte?: Maybe<Scalars['String']>;\n  logoUrl_contains?: Maybe<Scalars['String']>;\n  logoUrl_not_contains?: Maybe<Scalars['String']>;\n  logoUrl_starts_with?: Maybe<Scalars['String']>;\n  logoUrl_not_starts_with?: Maybe<Scalars['String']>;\n  logoUrl_ends_with?: Maybe<Scalars['String']>;\n  logoUrl_not_ends_with?: Maybe<Scalars['String']>;\n  jobs_every?: Maybe<JobWhereInput>;\n  jobs_some?: Maybe<JobWhereInput>;\n  jobs_none?: Maybe<JobWhereInput>;\n  twitter?: Maybe<Scalars['String']>;\n  twitter_not?: Maybe<Scalars['String']>;\n  twitter_in?: Maybe<Array<Scalars['String']>>;\n  twitter_not_in?: Maybe<Array<Scalars['String']>>;\n  twitter_lt?: Maybe<Scalars['String']>;\n  twitter_lte?: Maybe<Scalars['String']>;\n  twitter_gt?: Maybe<Scalars['String']>;\n  twitter_gte?: Maybe<Scalars['String']>;\n  twitter_contains?: Maybe<Scalars['String']>;\n  twitter_not_contains?: Maybe<Scalars['String']>;\n  twitter_starts_with?: Maybe<Scalars['String']>;\n  twitter_not_starts_with?: Maybe<Scalars['String']>;\n  twitter_ends_with?: Maybe<Scalars['String']>;\n  twitter_not_ends_with?: Maybe<Scalars['String']>;\n  emailed?: Maybe<Scalars['Boolean']>;\n  emailed_not?: Maybe<Scalars['Boolean']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<CompanyWhereInput>>;\n  OR?: Maybe<Array<CompanyWhereInput>>;\n  NOT?: Maybe<Array<CompanyWhereInput>>;\n};\n\nexport type TagWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  name_not?: Maybe<Scalars['String']>;\n  name_in?: Maybe<Array<Scalars['String']>>;\n  name_not_in?: Maybe<Array<Scalars['String']>>;\n  name_lt?: Maybe<Scalars['String']>;\n  name_lte?: Maybe<Scalars['String']>;\n  name_gt?: Maybe<Scalars['String']>;\n  name_gte?: Maybe<Scalars['String']>;\n  name_contains?: Maybe<Scalars['String']>;\n  name_not_contains?: Maybe<Scalars['String']>;\n  name_starts_with?: Maybe<Scalars['String']>;\n  name_not_starts_with?: Maybe<Scalars['String']>;\n  name_ends_with?: Maybe<Scalars['String']>;\n  name_not_ends_with?: Maybe<Scalars['String']>;\n  slug?: Maybe<Scalars['String']>;\n  slug_not?: Maybe<Scalars['String']>;\n  slug_in?: Maybe<Array<Scalars['String']>>;\n  slug_not_in?: Maybe<Array<Scalars['String']>>;\n  slug_lt?: Maybe<Scalars['String']>;\n  slug_lte?: Maybe<Scalars['String']>;\n  slug_gt?: Maybe<Scalars['String']>;\n  slug_gte?: Maybe<Scalars['String']>;\n  slug_contains?: Maybe<Scalars['String']>;\n  slug_not_contains?: Maybe<Scalars['String']>;\n  slug_starts_with?: Maybe<Scalars['String']>;\n  slug_not_starts_with?: Maybe<Scalars['String']>;\n  slug_ends_with?: Maybe<Scalars['String']>;\n  slug_not_ends_with?: Maybe<Scalars['String']>;\n  jobs_every?: Maybe<JobWhereInput>;\n  jobs_some?: Maybe<JobWhereInput>;\n  jobs_none?: Maybe<JobWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  updatedAt?: Maybe<Scalars['DateTime']>;\n  updatedAt_not?: Maybe<Scalars['DateTime']>;\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  updatedAt_lt?: Maybe<Scalars['DateTime']>;\n  updatedAt_lte?: Maybe<Scalars['DateTime']>;\n  updatedAt_gt?: Maybe<Scalars['DateTime']>;\n  updatedAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<TagWhereInput>>;\n  OR?: Maybe<Array<TagWhereInput>>;\n  NOT?: Maybe<Array<TagWhereInput>>;\n};\n\nexport enum JobOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  SlugAsc = 'slug_ASC',\n  SlugDesc = 'slug_DESC',\n  DescriptionAsc = 'description_ASC',\n  DescriptionDesc = 'description_DESC',\n  ApplyUrlAsc = 'applyUrl_ASC',\n  ApplyUrlDesc = 'applyUrl_DESC',\n  IsPublishedAsc = 'isPublished_ASC',\n  IsPublishedDesc = 'isPublished_DESC',\n  IsFeaturedAsc = 'isFeatured_ASC',\n  IsFeaturedDesc = 'isFeatured_DESC',\n  LocationNamesAsc = 'locationNames_ASC',\n  LocationNamesDesc = 'locationNames_DESC',\n  UserEmailAsc = 'userEmail_ASC',\n  UserEmailDesc = 'userEmail_DESC',\n  PostedAtAsc = 'postedAt_ASC',\n  PostedAtDesc = 'postedAt_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport enum CityOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  SlugAsc = 'slug_ASC',\n  SlugDesc = 'slug_DESC',\n  TypeAsc = 'type_ASC',\n  TypeDesc = 'type_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type City = {\n   __typename?: 'City';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  country: Country;\n  type: Scalars['String'];\n  jobs?: Maybe<Array<Job>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CityJobsArgs = {\n  where?: Maybe<JobWhereInput>;\n  orderBy?: Maybe<JobOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type Country = {\n   __typename?: 'Country';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  type: Scalars['String'];\n  isoCode?: Maybe<Scalars['String']>;\n  cities?: Maybe<Array<City>>;\n  jobs?: Maybe<Array<Job>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CountryCitiesArgs = {\n  where?: Maybe<CityWhereInput>;\n  orderBy?: Maybe<CityOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type CountryJobsArgs = {\n  where?: Maybe<JobWhereInput>;\n  orderBy?: Maybe<JobOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport enum CountryOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  SlugAsc = 'slug_ASC',\n  SlugDesc = 'slug_DESC',\n  TypeAsc = 'type_ASC',\n  TypeDesc = 'type_DESC',\n  IsoCodeAsc = 'isoCode_ASC',\n  IsoCodeDesc = 'isoCode_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport enum RemoteOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  SlugAsc = 'slug_ASC',\n  SlugDesc = 'slug_DESC',\n  TypeAsc = 'type_ASC',\n  TypeDesc = 'type_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type Remote = {\n   __typename?: 'Remote';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  type: Scalars['String'];\n  jobs?: Maybe<Array<Job>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type RemoteJobsArgs = {\n  where?: Maybe<JobWhereInput>;\n  orderBy?: Maybe<JobOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type Company = {\n   __typename?: 'Company';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  websiteUrl: Scalars['String'];\n  logoUrl?: Maybe<Scalars['String']>;\n  jobs?: Maybe<Array<Job>>;\n  twitter?: Maybe<Scalars['String']>;\n  emailed?: Maybe<Scalars['Boolean']>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type CompanyJobsArgs = {\n  where?: Maybe<JobWhereInput>;\n  orderBy?: Maybe<JobOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport enum TagOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  SlugAsc = 'slug_ASC',\n  SlugDesc = 'slug_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type Tag = {\n   __typename?: 'Tag';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  slug: Scalars['String'];\n  jobs?: Maybe<Array<Job>>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\n\nexport type TagJobsArgs = {\n  where?: Maybe<JobWhereInput>;\n  orderBy?: Maybe<JobOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type JobInput = {\n  companySlug: Scalars['String'];\n  jobSlug: Scalars['String'];\n};\n\nexport type LocationsInput = {\n  value: Scalars['String'];\n};\n\nexport type Location = {\n   __typename?: 'Location';\n  id: Scalars['ID'];\n  slug: Scalars['String'];\n  name: Scalars['String'];\n  type: Scalars['String'];\n};\n\nexport type LocationInput = {\n  slug: Scalars['String'];\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation';\n  subscribe: User;\n  postJob: Job;\n  updateJob: Job;\n  updateCompany: Company;\n};\n\n\nexport type MutationSubscribeArgs = {\n  input: SubscribeInput;\n};\n\n\nexport type MutationPostJobArgs = {\n  input: PostJobInput;\n};\n\n\nexport type MutationUpdateJobArgs = {\n  input: UpdateJobInput;\n  adminSecret: Scalars['String'];\n};\n\n\nexport type MutationUpdateCompanyArgs = {\n  input: UpdateCompanyInput;\n  adminSecret: Scalars['String'];\n};\n\nexport type SubscribeInput = {\n  name: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type User = {\n   __typename?: 'User';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  email: Scalars['String'];\n  subscribe: Scalars['Boolean'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n};\n\nexport type PostJobInput = {\n  title: Scalars['String'];\n  commitmentId: Scalars['ID'];\n  companyName: Scalars['String'];\n  locationNames: Scalars['String'];\n  userEmail: Scalars['String'];\n  description: Scalars['String'];\n  applyUrl: Scalars['String'];\n};\n\nexport type UpdateJobInput = {\n  id: Scalars['ID'];\n  description: Scalars['String'];\n};\n\nexport type UpdateCompanyInput = {\n  id: Scalars['ID'];\n  logoUrl: Scalars['String'];\n};\n\nexport type GetJobDetailQueryVariables = {\n  input: JobInput;\n};\n\n\nexport type GetJobDetailQuery = (\n  { __typename?: 'Query' }\n  & { job: (\n    { __typename?: 'Job' }\n    & Pick<Job, 'id' | 'title' | 'description' | 'locationNames' | 'userEmail' | 'postedAt'>\n    & { commitment: (\n      { __typename?: 'Commitment' }\n      & Pick<Commitment, 'title'>\n    ), cities?: Maybe<Array<(\n      { __typename?: 'City' }\n      & Pick<City, 'name'>\n      & { country: (\n        { __typename?: 'Country' }\n        & Pick<Country, 'id' | 'name'>\n      ) }\n    )>>, remotes?: Maybe<Array<(\n      { __typename?: 'Remote' }\n      & Pick<Remote, 'id' | 'type'>\n    )>>, company?: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'id' | 'name' | 'logoUrl'>\n    )> }\n  ) }\n);\n\nexport type GetJobListQueryVariables = {};\n\n\nexport type GetJobListQuery = (\n  { __typename?: 'Query' }\n  & { jobs: Array<(\n    { __typename?: 'Job' }\n    & Pick<Job, 'id' | 'title' | 'slug' | 'postedAt'>\n    & { cities?: Maybe<Array<(\n      { __typename?: 'City' }\n      & Pick<City, 'name'>\n      & { country: (\n        { __typename?: 'Country' }\n        & Pick<Country, 'id' | 'name'>\n      ) }\n    )>>, remotes?: Maybe<Array<(\n      { __typename?: 'Remote' }\n      & Pick<Remote, 'id' | 'type'>\n    )>>, company?: Maybe<(\n      { __typename?: 'Company' }\n      & Pick<Company, 'id' | 'name' | 'slug' | 'logoUrl'>\n    )> }\n  )> }\n);\n\nexport type GetCompaniesQueryVariables = {};\n\n\nexport type GetCompaniesQuery = (\n  { __typename?: 'Query' }\n  & { companies: Array<(\n    { __typename?: 'Company' }\n    & Pick<Company, 'id' | 'name' | 'slug'>\n  )> }\n);\n\nexport type GetCountriesQueryVariables = {};\n\n\nexport type GetCountriesQuery = (\n  { __typename?: 'Query' }\n  & { countries: Array<(\n    { __typename?: 'Country' }\n    & Pick<Country, 'id' | 'name'>\n  )> }\n);\n\n\nexport const GetJobDetailDocument = gql`\n    query getJobDetail($input: JobInput!) {\n  job(input: $input) {\n    id\n    title\n    description\n    locationNames\n    userEmail\n    commitment {\n      title\n    }\n    cities {\n      name\n      country {\n        id\n        name\n      }\n    }\n    remotes {\n      id\n      type\n    }\n    company {\n      id\n      name\n      logoUrl\n    }\n    postedAt\n  }\n}\n    `;\nexport type GetJobDetailComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetJobDetailQuery, GetJobDetailQueryVariables>, 'query'> & ({ variables: GetJobDetailQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetJobDetailComponent = (props: GetJobDetailComponentProps) => (\n      <ApolloReactComponents.Query<GetJobDetailQuery, GetJobDetailQueryVariables> query={GetJobDetailDocument} {...props} />\n    );\n    \nexport type GetJobDetailProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<GetJobDetailQuery, GetJobDetailQueryVariables>\n    } & TChildProps;\nexport function withGetJobDetail<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetJobDetailQuery,\n  GetJobDetailQueryVariables,\n  GetJobDetailProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, GetJobDetailQuery, GetJobDetailQueryVariables, GetJobDetailProps<TChildProps, TDataName>>(GetJobDetailDocument, {\n      alias: 'getJobDetail',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetJobDetailQuery__\n *\n * To run a query within a React component, call `useGetJobDetailQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetJobDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetJobDetailQuery({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useGetJobDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetJobDetailQuery, GetJobDetailQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetJobDetailQuery, GetJobDetailQueryVariables>(GetJobDetailDocument, baseOptions);\n      }\nexport function useGetJobDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetJobDetailQuery, GetJobDetailQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetJobDetailQuery, GetJobDetailQueryVariables>(GetJobDetailDocument, baseOptions);\n        }\nexport type GetJobDetailQueryHookResult = ReturnType<typeof useGetJobDetailQuery>;\nexport type GetJobDetailLazyQueryHookResult = ReturnType<typeof useGetJobDetailLazyQuery>;\nexport type GetJobDetailQueryResult = ApolloReactCommon.QueryResult<GetJobDetailQuery, GetJobDetailQueryVariables>;\nexport const GetJobListDocument = gql`\n    query getJobList {\n  jobs {\n    id\n    title\n    slug\n    cities {\n      name\n      country {\n        id\n        name\n      }\n    }\n    remotes {\n      id\n      type\n    }\n    company {\n      id\n      name\n      slug\n      logoUrl\n    }\n    postedAt\n  }\n}\n    `;\nexport type GetJobListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetJobListQuery, GetJobListQueryVariables>, 'query'>;\n\n    export const GetJobListComponent = (props: GetJobListComponentProps) => (\n      <ApolloReactComponents.Query<GetJobListQuery, GetJobListQueryVariables> query={GetJobListDocument} {...props} />\n    );\n    \nexport type GetJobListProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<GetJobListQuery, GetJobListQueryVariables>\n    } & TChildProps;\nexport function withGetJobList<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetJobListQuery,\n  GetJobListQueryVariables,\n  GetJobListProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, GetJobListQuery, GetJobListQueryVariables, GetJobListProps<TChildProps, TDataName>>(GetJobListDocument, {\n      alias: 'getJobList',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetJobListQuery__\n *\n * To run a query within a React component, call `useGetJobListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetJobListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetJobListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetJobListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetJobListQuery, GetJobListQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetJobListQuery, GetJobListQueryVariables>(GetJobListDocument, baseOptions);\n      }\nexport function useGetJobListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetJobListQuery, GetJobListQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetJobListQuery, GetJobListQueryVariables>(GetJobListDocument, baseOptions);\n        }\nexport type GetJobListQueryHookResult = ReturnType<typeof useGetJobListQuery>;\nexport type GetJobListLazyQueryHookResult = ReturnType<typeof useGetJobListLazyQuery>;\nexport type GetJobListQueryResult = ApolloReactCommon.QueryResult<GetJobListQuery, GetJobListQueryVariables>;\nexport const GetCompaniesDocument = gql`\n    query getCompanies {\n  companies {\n    id\n    name\n    slug\n  }\n}\n    `;\nexport type GetCompaniesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCompaniesQuery, GetCompaniesQueryVariables>, 'query'>;\n\n    export const GetCompaniesComponent = (props: GetCompaniesComponentProps) => (\n      <ApolloReactComponents.Query<GetCompaniesQuery, GetCompaniesQueryVariables> query={GetCompaniesDocument} {...props} />\n    );\n    \nexport type GetCompaniesProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<GetCompaniesQuery, GetCompaniesQueryVariables>\n    } & TChildProps;\nexport function withGetCompanies<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetCompaniesQuery,\n  GetCompaniesQueryVariables,\n  GetCompaniesProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, GetCompaniesQuery, GetCompaniesQueryVariables, GetCompaniesProps<TChildProps, TDataName>>(GetCompaniesDocument, {\n      alias: 'getCompanies',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetCompaniesQuery__\n *\n * To run a query within a React component, call `useGetCompaniesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCompaniesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCompaniesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCompaniesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCompaniesQuery, GetCompaniesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCompaniesQuery, GetCompaniesQueryVariables>(GetCompaniesDocument, baseOptions);\n      }\nexport function useGetCompaniesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCompaniesQuery, GetCompaniesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCompaniesQuery, GetCompaniesQueryVariables>(GetCompaniesDocument, baseOptions);\n        }\nexport type GetCompaniesQueryHookResult = ReturnType<typeof useGetCompaniesQuery>;\nexport type GetCompaniesLazyQueryHookResult = ReturnType<typeof useGetCompaniesLazyQuery>;\nexport type GetCompaniesQueryResult = ApolloReactCommon.QueryResult<GetCompaniesQuery, GetCompaniesQueryVariables>;\nexport const GetCountriesDocument = gql`\n    query getCountries {\n  countries {\n    id\n    name\n  }\n}\n    `;\nexport type GetCountriesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetCountriesQuery, GetCountriesQueryVariables>, 'query'>;\n\n    export const GetCountriesComponent = (props: GetCountriesComponentProps) => (\n      <ApolloReactComponents.Query<GetCountriesQuery, GetCountriesQueryVariables> query={GetCountriesDocument} {...props} />\n    );\n    \nexport type GetCountriesProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<GetCountriesQuery, GetCountriesQueryVariables>\n    } & TChildProps;\nexport function withGetCountries<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetCountriesQuery,\n  GetCountriesQueryVariables,\n  GetCountriesProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, GetCountriesQuery, GetCountriesQueryVariables, GetCountriesProps<TChildProps, TDataName>>(GetCountriesDocument, {\n      alias: 'getCountries',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetCountriesQuery__\n *\n * To run a query within a React component, call `useGetCountriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCountriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCountriesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetCountriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCountriesQuery, GetCountriesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetCountriesQuery, GetCountriesQueryVariables>(GetCountriesDocument, baseOptions);\n      }\nexport function useGetCountriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCountriesQuery, GetCountriesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetCountriesQuery, GetCountriesQueryVariables>(GetCountriesDocument, baseOptions);\n        }\nexport type GetCountriesQueryHookResult = ReturnType<typeof useGetCountriesQuery>;\nexport type GetCountriesLazyQueryHookResult = ReturnType<typeof useGetCountriesLazyQuery>;\nexport type GetCountriesQueryResult = ApolloReactCommon.QueryResult<GetCountriesQuery, GetCountriesQueryVariables>;","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { isEmpty, cloneDeep, orderBy } from 'lodash';\r\nimport * as moment from 'moment';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { Grid, FormControl, Input, Select, MenuItem, Avatar, Paper, Box } from '@material-ui/core';\r\nimport { GetJobListQuery, GetCompaniesQuery, GetCountriesQuery } from '../../generated/graphql';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    logo: {\r\n      color: '#60e7f3',\r\n      fontSize: '2.5em',\r\n    },\r\n    formControl: {\r\n      margin: `${theme.spacing(1)}px 0`,\r\n    },\r\n    select: {\r\n      border: '1px solid #dcdcdc',\r\n      padding: theme.spacing(1),\r\n      borderRadius: theme.spacing(1),\r\n    },\r\n    dropDownIcon: {\r\n      right: 8,\r\n    },\r\n    label: {\r\n      marginTop: theme.spacing(1),\r\n      marginBottom: 0,\r\n    },\r\n    avatar: {\r\n      backgroundColor: '#ffd391',\r\n    },\r\n    large: {\r\n      height: 50,\r\n      width: 50,\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    link: {\r\n      textDecoration: 'none',\r\n    },\r\n    jobPaper: {\r\n      margin: `${theme.spacing(2)}px 0`,\r\n      padding: theme.spacing(2),\r\n      borderRadius: theme.spacing(1),\r\n    }\r\n  }),\r\n);\r\n\r\n// Paper dropdown styles\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\ninterface Props {\r\n  jobsData: GetJobListQuery;\r\n  companiesData: GetCompaniesQuery;\r\n  countriesData: GetCountriesQuery;\r\n}\r\n\r\nconst JobList: React.FC<Props> = ({ jobsData, companiesData, countriesData }) => {\r\n  const classes = useStyles();\r\n  const [filteredJobs, setFilteredJobs] = React.useState<any[]>(orderBy(jobsData.jobs, 'postedAt', 'desc'));\r\n  const [selectedCompanies, setSelectedCompanies] = React.useState([]);\r\n  const [selectedCountries, setSelectedCountries] = React.useState([]);\r\n  const [sortOrder, setSortOrder] = React.useState<'desc' | 'asc'>('desc');\r\n\r\n  const filterJobs = React.useCallback((selectedCountries : any, selectedCompanies : any) => {\r\n    if (isEmpty(selectedCountries) && isEmpty(selectedCompanies)) {\r\n      setFilteredJobs(jobsData.jobs);\r\n    } else {\r\n      let filteredJobs = cloneDeep(jobsData.jobs);\r\n      // filter by company\r\n      if (!isEmpty(selectedCompanies)) {\r\n        filteredJobs = filteredJobs.filter(job => selectedCompanies.includes(job.company?.id));\r\n      }\r\n      // filter by country\r\n      if (!isEmpty(selectedCountries)) {\r\n        filteredJobs = filteredJobs.filter((job : any )=> job.cities && (job.cities as any[]).some(city => selectedCountries.includes(city.country.id)));\r\n      }\r\n      setFilteredJobs(orderBy(filteredJobs, 'postedAt', sortOrder));\r\n    }\r\n  },  [jobsData.jobs, sortOrder]);\r\n\r\n  const sortJobs = React.useCallback((order : 'desc' | 'asc') => {\r\n    setSortOrder(order);\r\n    const sortedJobs = orderBy(filteredJobs, ['postedAt'], [order]);\r\n    setFilteredJobs(sortedJobs);\r\n  }, [filteredJobs]);\r\n\r\n  return (\r\n  <React.Fragment>\r\n    <h1 className={classes.logo}>GraphQl Jobs</h1>\r\n    <h4 className={classes.label}>Filtrar por</h4>\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <Select\r\n            id=\"select-country\"\r\n            displayEmpty\r\n            multiple\r\n            className={classes.select}\r\n            classes={{\r\n              icon: classes.dropDownIcon\r\n            }}\r\n            value={selectedCountries}\r\n            onChange={(e : any) => {\r\n              setSelectedCountries(e.target.value);\r\n              filterJobs(e.target.value, selectedCompanies);\r\n            }}\r\n            renderValue={(selected) => {\r\n              if ((selected as string[]).length === 0) {\r\n                return <em>País</em>;\r\n              }\r\n              const selectedNames = (selected as string[]).map((s) => {\r\n                const match = (countriesData.countries as any[]).find(c => c.id === s);\r\n                return match && match.name;\r\n              });\r\n              return (selectedNames as string[]).join(', ');\r\n            }}\r\n            input={<Input disableUnderline />}\r\n            MenuProps={MenuProps}\r\n          >\r\n            <MenuItem disabled value=\"\">\r\n              <em>País</em>\r\n            </MenuItem>\r\n            {countriesData.countries && countriesData.countries.map((country : any) => (\r\n              <MenuItem key={country.id} value={country.id}>\r\n                {country.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <Select\r\n            id=\"select-company\"\r\n            displayEmpty\r\n            multiple\r\n            className={classes.select}\r\n            classes={{\r\n              icon: classes.dropDownIcon\r\n            }}\r\n            value={selectedCompanies}\r\n            onChange={(e : any) => {\r\n              setSelectedCompanies(e.target.value);\r\n              filterJobs(selectedCountries, e.target.value);\r\n            }}\r\n            renderValue={(selected) => {\r\n              if ((selected as string[]).length === 0) {\r\n                return <em>Compañía</em>;\r\n              }\r\n              const selectedNames = (selected as string[]).map((s) => {\r\n                const match = (companiesData.companies as any[]).find(c => c.id === s);\r\n                return match && match.name;\r\n              });\r\n              return (selectedNames as string[]).join(', ');\r\n            }}\r\n            input={<Input disableUnderline />}\r\n            MenuProps={MenuProps}\r\n          >\r\n            <MenuItem disabled value=\"\">\r\n              <em>Compañía</em>\r\n            </MenuItem>\r\n            {companiesData.companies && companiesData.companies.map(company => (\r\n              <MenuItem key={company.id} value={company.id}>\r\n                {company.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    </Grid>\r\n    <h4 className={classes.label}>Ordenar por fecha</h4>\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} sm={6}>\r\n        <FormControl fullWidth className={classes.formControl}>\r\n          <Select\r\n            labelId=\"select-order-label\"\r\n            id=\"select-order\"\r\n            className={classes.select}\r\n            classes={{\r\n              icon: classes.dropDownIcon\r\n            }}\r\n            value={sortOrder}\r\n            onChange={(e : any) => {\r\n              sortJobs(e.target.value);\r\n            }}\r\n            input={<Input disableUnderline />}\r\n            MenuProps={MenuProps}\r\n          >\r\n            <MenuItem key=\"order-desc\" value=\"desc\">\r\n              De más nuevo a más antiguo\r\n            </MenuItem>\r\n            <MenuItem key=\"order-asc\" value=\"asc\">\r\n              De más antiguo a más nuevo\r\n            </MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    </Grid>\r\n    <h2>Empleos</h2>\r\n    {filteredJobs && filteredJobs.map(\r\n        (job, i) =>\r\n          !!job && (\r\n            <Link key={i} to={`/detail/${job.company.slug}/${job.slug}`} style={{ textDecoration: 'none'}}>\r\n              <Paper variant=\"outlined\" className={classes.jobPaper}>\r\n                <Grid container direction=\"row\" alignItems=\"center\">\r\n                  {job.company.logoUrl\r\n                    ? (\r\n                      <Avatar alt={job.company.name} src={job.company.logoUrl} className={classes.large} />\r\n                    ) : (\r\n                      <Avatar alt={job.company.name} className={`${classes.large} ${classes.avatar}`}>{job.company.name.charAt(0).toUpperCase()}</Avatar>\r\n                    )}\r\n                  <Box flexGrow={1}>\r\n                    <h3>{job.title}</h3>\r\n                      <Grid container>\r\n                      <Grid item xs={12} sm={4}>\r\n                        {job.company?.name}\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={4}>\r\n                        {job.cities.length ? job.cities[0].country.name : ''}\r\n                      </Grid>\r\n                      <Grid item xs={12} sm={4}>\r\n                        <span>{moment.default(job.postedAt).format('LL')}</span>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Box>\r\n                </Grid>\r\n              </Paper>\r\n            </Link>\r\n          ),\r\n      )}\r\n  </React.Fragment>\r\n)};\r\n\r\nexport default JobList;","import * as React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Loader from '../assets/loader.svg';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    fullHeight: {\r\n      height: '100vh',\r\n    },\r\n    loader: {\r\n      width: 80,\r\n    }\r\n  }),\r\n);\r\n\r\n\r\nconst LoaderComponent : React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"center\" className={classes.fullHeight}>\r\n      <img src={Loader} alt=\"This loader is provided by loading.io\" className={classes.loader}/>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default LoaderComponent;\r\n","import * as React from 'react';\r\nimport { useGetJobListQuery, useGetCompaniesQuery, useGetCountriesQuery } from '../../generated/graphql';\r\nimport JobList from './JobList';\r\nimport Loader from '../Loader';\r\n\r\nconst JobListContainer = () => {\r\n  const { data:jobsData, error: jobsError, loading: jobsLoading } = useGetJobListQuery();\r\n  const { data: companiesData, error: companiesError, loading: companiesLoading } = useGetCompaniesQuery();\r\n  const { data: countriesData, error: countriesError, loading: countriesLoading } = useGetCountriesQuery();\r\n\r\n  if (jobsLoading || companiesLoading || countriesLoading) {\r\n    return <Loader />\r\n  }\r\n\r\n  if (jobsError || companiesError || countriesError || !jobsData || !companiesData || !countriesData) {\r\n\r\n    return <div>ERROR</div>;\r\n  }\r\n\r\n  return <JobList jobsData={ jobsData} countriesData={countriesData} companiesData={companiesData} />;\r\n};\r\n\r\nexport default JobListContainer;\r\n","import * as React from 'react';\r\nimport * as moment from 'moment';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Marked } from '@ts-stack/markdown';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { Grid, Typography, Avatar, Button, Divider } from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBackIos';\r\nimport { GetJobDetailQuery } from '../../generated/graphql';\r\n\r\ninterface Props {\r\n  data: GetJobDetailQuery;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    avatar: {\r\n      backgroundColor: '#ffd391',\r\n    },\r\n    small: {\r\n      height: 35,\r\n      width: 35,\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    link: {\r\n      textDecoration: 'none',\r\n    },\r\n    title: {\r\n      marginBottom: theme.spacing(1),\r\n      color: '#ff727d'\r\n    },\r\n    caption: {\r\n      margin: `${theme.spacing(2)}px 0`\r\n    },\r\n    button: {\r\n      borderRadius: theme.spacing(1),\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    iconButton: {\r\n      color: '#60e7f3',\r\n    },\r\n    divider: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\n\r\nconst JobDetail: React.FC<Props> = ({ data }) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  if (!data.job) {\r\n    return <div>No tenemos información por el momento.</div>;\r\n  }\r\n\r\n  return (\r\n    !data.job\r\n      ? (\r\n        <div>No tenemos información por el momento.</div>\r\n      ) : (\r\n        <React.Fragment>\r\n          <Button\r\n            className={classes.button}\r\n            startIcon={<ArrowBackIcon className={classes.iconButton} />}\r\n            onClick={() => history.goBack()}\r\n          >\r\n            Volver\r\n          </Button>\r\n          <h1 className={classes.title}>\r\n            {data.job.title}\r\n          </h1>\r\n          <Typography variant=\"caption\" display=\"block\" gutterBottom className={classes.caption}>\r\n            Publicado el {moment.default(data.job.postedAt).format('LL')}\r\n          </Typography>\r\n          <Grid container direction=\"row\" alignItems=\"center\">\r\n            {data.job.company!.logoUrl\r\n              ? (\r\n                <Avatar alt={data.job.company!.name} src={data.job.company!.logoUrl} className={classes.small} />\r\n              ) : (\r\n                <Avatar alt={data.job.company!.name} className={`${classes.small} ${classes.avatar}`}>{data.job.company!.name.charAt(0).toUpperCase()}</Avatar>\r\n              )}\r\n            <span>{data.job.company?.name}</span>\r\n          </Grid>\r\n          <Divider light className={classes.divider} />\r\n          <Grid item xs={12} sm={10} md={8} id=\"descriptionContainer\">\r\n            <div dangerouslySetInnerHTML={{ __html: Marked.parse(data.job.description!) }} />\r\n          </Grid>\r\n        </React.Fragment>\r\n      )\r\n  );\r\n};\r\n\r\nexport default JobDetail;","import * as React from 'react';\r\nimport { useGetJobDetailQuery } from '../../generated/graphql';\r\n\r\nimport JobDetail from './JobDetail';\r\nimport Loader from '../Loader';\r\n\r\ninterface OwnProps {\r\n  match: any;\r\n}\r\n\r\nconst JobDetailContainer = ({ match }: OwnProps) => {\r\n  console.log(match);\r\n  const { data, error, loading } = useGetJobDetailQuery({\r\n    variables: {\r\n      input: {\r\n        jobSlug: match.params.jobslug,\r\n        companySlug: match.params.companyslug,\r\n      }\r\n    }\r\n  });\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>ERROR</div>;\r\n  }\r\n\r\n  if (!data) {\r\n    return <div>No tenemos información disponible.</div>;\r\n  }\r\n\r\n  return <JobDetail data={data} />;\r\n};\r\n\r\nexport default JobDetailContainer;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport * as moment from 'moment';\nimport 'moment/locale/es';\nimport { Container } from '@material-ui/core';\nimport JobList from './components/JobList';\nimport JobDetail from './components/JobDetail';\nimport './App.css';\n\nmoment.default().locale('es');\n\nfunction App() {\n  return (\n    <Router>\n      <Container maxWidth=\"md\">\n        <Route path=\"/\" exact component={JobList} />\n        <Route path=\"/detail/:companyslug/:jobslug\" exact component={JobDetail} />\n      </Container >\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({\n  uri: 'https://api.graphql.jobs/',\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loader.34e4b8cb.svg\";"],"sourceRoot":""}